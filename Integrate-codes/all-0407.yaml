AWSTemplateFormatVersion: 2010-09-09
Description: 'vpc, elasticbeanstalk'
Resources:
  ## 1.
  ## OWASP Top 10 A1
  ## Mitigate SQL Injection Attacks
  ## Matches attempted SQLi patterns in the URI, QUERY_STRING, BODY, COOKIES
  wafgSQLiSet:
    Type: AWS::WAF::SqlInjectionMatchSet
    Properties:
      Name: generical-detect-sqli
      SqlInjectionMatchTuples:
        - FieldToMatch:
            Type: URI
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: HTML_ENTITY_DECODE
  wafgSQLiRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericaclmitigatesqli
      Name: generical-mitigate-sqli
      Predicates:
        - Type: SqlInjectionMatch
          Negated: false
          DataId: !Ref wafgSQLiSet

  ## 2.
  ## OWASP Top 10 A2
  ## Blacklist bad/hijacked JWT tokens or session IDs
  ## Matches the specific values in the cookie or Authorization header
  ## for JWT it is sufficient to check the signature
  wafgAuthTokenStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-auth-tokens
      ByteMatchTuples:
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          PositionalConstraint: CONTAINS
          TargetString: example-session-id
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: authorization
          PositionalConstraint: ENDS_WITH
          TargetString: .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
          TextTransformation: URL_DECODE
  wafgAuthTokenRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericaclbadauthtokens
      Name: generical-detect-bad-auth-tokens
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgAuthTokenStringSet

  ## 3.
  ## OWASP Top 10 A3
  ## Mitigate Cross Site Scripting Attacks
  ## Matches attempted XSS patterns in the URI, QUERY_STRING, BODY, COOKIES
  wafgXSSSet:
    Type: AWS::WAF::XssMatchSet
    Properties:
      Name: generical-detect-xss
      XssMatchTuples:
        - FieldToMatch:
            Type: URI
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: BODY
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: HTML_ENTITY_DECODE
  wafgXSSRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericaclmitigatexss
      Name: generical-mitigate-xss
      Predicates:
        - Type: XssMatch
          Negated: false
          DataId: !Ref wafgXSSSet

  ## 4.
  ## OWASP Top 10 A4
  ## Path Traversal, LFI, RFI
  ## Matches request patterns designed to traverse filesystem paths, and include
  ## local or remote files
  wafgPathsStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-rfi-lfi-traversal
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ../
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: HTML_ENTITY_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: ://
          TextTransformation: HTML_ENTITY_DECODE
  wafgPathsRule:
    Type: AWS::WAF::Rule

    Properties:
      MetricName: genericacldetectrfilfi
      Name: generical-detect-rfi-lfi-traversal
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgPathsStringSet

  ## 5.
  ## OWASP Top 10 A4
  ## Privileged Module Access Restrictions
  ## Restrict access to the admin interface to known source IPs only
  ## Matches the URI prefix, when the remote IP isn't in the whitelist
  wafgAdminUrlStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-admin-url
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: STARTS_WITH
          TargetString: /admin
          TextTransformation: URL_DECODE
  wafgAdminRemoteAddrIpSet:
    Type: AWS::WAF::IPSet
    Properties:
      Name: generical-match-admin-remote-ip
      IPSetDescriptors:
        - Type: IPV4
          Value: 127.0.0.1/32
  wafgAdminAccessRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericacldetectadminaccess
      Name: generical-detect-admin-access
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgAdminUrlStringSet
        - Type: IPMatch
          Negated: true
          DataId: !Ref wafgAdminRemoteAddrIpSet

  ## 6.
  ## OWASP Top 10 A5
  ## PHP Specific Security Misconfigurations
  ## Matches request patterns designed to exploit insecure PHP/CGI configuration
  wafgPHPInsecureQSStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-php-insecure-var-refs
      ByteMatchTuples:
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: _SERVER[
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: _ENV[
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: auto_prepend_file=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: auto_append_file=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: allow_url_include=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: disable_functions=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: open_basedir=
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: QUERY_STRING
          PositionalConstraint: CONTAINS
          TargetString: safe_mode=
          TextTransformation: URL_DECODE
  wafgPHPInsecureURIStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-php-insecure-uri
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: php
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: /
          TextTransformation: URL_DECODE
  wafgPHPInsecureRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericacldetectphpinsecure
      Name: generical-detect-php-insecure
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgPHPInsecureQSStringSet
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgPHPInsecureURIStringSet

  ## 7.
  ## OWASP Top 10 A7
  ## Mitigate abnormal requests via size restrictions
  ## Enforce consistent request hygene, limit size of key elements
  wafgSizeRestrictionSet:
    Type: AWS::WAF::SizeConstraintSet
    Properties:
      Name: generical-size-restrictions
      SizeConstraints:
        - FieldToMatch:
            Type: URI
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: 512
        - FieldToMatch:
            Type: QUERY_STRING
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: 1024
        - FieldToMatch:
            Type: BODY
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: 4096
        - FieldToMatch:
            Type: HEADER
            Data: cookie
          TextTransformation: NONE
          ComparisonOperator: GT
          Size: 4093
  wafgSizeRestrictionRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericaclrestrictsizes
      Name: generical-restrict-sizes
      Predicates:
        - Type: SizeConstraint
          Negated: false
          DataId: !Ref wafgSizeRestrictionSet

  ## 8.
  ## OWASP Top 10 A8
  ## CSRF token enforcement example
  ## Enforce the presence of CSRF token in request header
  wafgCSRFMethodStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-csrf-method
      ByteMatchTuples:
        - FieldToMatch:
            Type: METHOD
          PositionalConstraint: EXACTLY
          TargetString: post
          TextTransformation: LOWERCASE
  wafgCSRFTokenSizeConstraint:
    Type: AWS::WAF::SizeConstraintSet
    Properties:
      Name: generical-match-csrf-token
      SizeConstraints:
        - FieldToMatch:
            Type: HEADER
            Data: x-csrf-token
          TextTransformation: NONE
          ComparisonOperator: EQ
          Size: 36
  wafgCSRFRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericaclenforcecsrf
      Name: generical-enforce-csrf
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgCSRFMethodStringSet
        - Type: SizeConstraint
          Negated: true
          DataId: !Ref wafgCSRFTokenSizeConstraint

  ## 9.
  ## OWASP Top 10 A9
  ## Server-side includes & libraries in webroot
  ## Matches request patterns for webroot objects that shouldn't be directly accessible
  wafgServerSideIncludeStringSet:
    Type: AWS::WAF::ByteMatchSet
    Properties:
      Name: generical-match-ssi
      ByteMatchTuples:
        - FieldToMatch:
            Type: URI
          PositionalConstraint: STARTS_WITH
          TargetString: /includes
          TextTransformation: URL_DECODE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .cfg
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .conf
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .config
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .ini
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .log
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .bak
          TextTransformation: LOWERCASE
        - FieldToMatch:
            Type: URI
          PositionalConstraint: ENDS_WITH
          TargetString: .backup
          TextTransformation: LOWERCASE
  wafgServerSideIncludeRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericacldetectssi
      Name: generical-detect-ssi
      Predicates:
        - Type: ByteMatch
          Negated: false
          DataId: !Ref wafgServerSideIncludeStringSet

  ## 10.
  ## Generic
  ## IP Blacklist
  ## Matches IP addresses that should not be allowed to access content
  wafgBlacklistIpSet:
    Type: AWS::WAF::IPSet
    Properties:
      Name: generical-match-blacklisted-ips
      IPSetDescriptors:
        - Type: IPV4
          Value: 10.0.0.0/8
        - Type: IPV4
          Value: 192.168.0.0/16
        - Type: IPV4
          Value: 169.254.0.0/16
        - Type: IPV4
          Value: 172.16.0.0/16
        - Type: IPV4
          Value: 127.0.0.1/32
  wafgBlacklistIpRule:
    Type: AWS::WAF::Rule
    Properties:
      MetricName: genericaclblacklistedips
      Name: generical-detect-blacklisted-ips
      Predicates:
        - Type: IPMatch
          Negated: false
          DataId: !Ref wafgBlacklistIpSet

  ## --
  ## WebACL containing the above rules evaluated in-order
  wafgOwaspACL:
    Type: AWS::WAF::WebACL
    Properties:
      MetricName: genericaclowaspacl
      Name: generical-owasp-acl
      DefaultAction:
        Type: ALLOW
      Rules:
        - Action:
            Type: COUNT
          Priority: 10
          RuleId: !Ref wafgSizeRestrictionRule
        - Action:
            Type: COUNT
          Priority: 20
          RuleId: !Ref wafgBlacklistIpRule
        - Action:
            Type: COUNT
          Priority: 30
          RuleId: !Ref wafgAuthTokenRule
        - Action:
            Type: COUNT
          Priority: 40
          RuleId: !Ref wafgSQLiRule
        - Action:
            Type: COUNT
          Priority: 50
          RuleId: !Ref wafgXSSRule
        - Action:
            Type: COUNT
          Priority: 60
          RuleId: !Ref wafgPathsRule
        - Action:
            Type: COUNT
          Priority: 70
          RuleId: !Ref wafgPHPInsecureRule
        - Action:
            Type: COUNT
          Priority: 80
          RuleId: !Ref wafgCSRFRule
        - Action:
            Type: COUNT
          Priority: 90
          RuleId: !Ref wafgServerSideIncludeRule
        - Action:
            Type: COUNT
          Priority: 100
          RuleId: !Ref wafgAdminAccessRule

  #============================================================================================================
  #Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Project-VPC
  #============================================================================================================
  #Create Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Project-Gateway     
  #============================================================================================================
  #Attach Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  #============================================================================================================
  #Create Subnets
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Project-Subnet-A
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      VpcId: !Ref VPC
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Project-Subnet-B
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Project-Subnet-C
  #============================================================================================================
  #Create Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Project-RouteTable
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  #============================================================================================================
  #Associate Route table to Subnets
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC
  #============================================================================================================
  #Create security group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Project-SG1
  #============================================================================================================
  #Create elastic beanstalk Application
  sampleApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample Application
  #============================================================================================================
  #Create elastic beanstalk Application Version
  sampleApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: sampleApplication
      Description: AWS ElasticBeanstalk Sample Application Version
      SourceBundle:
        S3Bucket: !Sub "elasticbeanstalk-samples-${AWS::Region}"
        S3Key: php-sample.zip
  #============================================================================================================
  #Create elastic beanstalk Configuration template
  sampleConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: sampleApplication
      Description: AWS ElasticBeanstalk Sample Configuration Template
      OptionSettings:
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: '2'
      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: '6'
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced
      - Namespace: aws:elb:loadbalancer
        OptionName: CrossZone
        Value: 'True'
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !Ref VPC
      - Namespace: aws:elb:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !Ref SecurityGroup
      - Namespace: aws:elb:loadbalancer
        OptionName: SecurityGroups
        Value: !Ref SecurityGroup
      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value: !Ref SubnetA
      SolutionStackName: 64bit Amazon Linux running PHP 5.3
  #============================================================================================================
  #Create elastic beanstalk Application
  sampleEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:
        Ref: sampleApplication
      Description: AWS ElasticBeanstalk Sample Environment
      TemplateName:
        Ref: sampleConfigurationTemplate
      VersionLabel:
        Ref: sampleApplicationVersion
  #============================================================================================================
  #Create Cloudfront distribution
  myDistribution:
    Type: 'AWS::CloudFront::Distribution'
    DependsOn: wafgOwaspACL
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt sampleEnvironment.EndpointURL
          Id: myCustomOrigin
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: http-only
        Enabled: 'true'
        Comment: Somecomment
        Aliases:
        - www.liviero.xyz
        DefaultCacheBehavior:
          TargetOriginId: myCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: all
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:533657682621:certificate/f6eaacc9-1bdf-4971-8d03-8045cd955952
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        WebACLId: !Ref wafgOwaspACL
  #============================================================================================================
  #Create Cloudfront A record
  myDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: liviero.xyz.
      RecordSets:
      - Name: www.liviero.xyz.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt myDistribution.DomainName
  #=========================================================
Outputs:
  Ebenpoint:
    Description: Tendpoint of EB
    Value: !GetAtt sampleEnvironment.EndpointURL